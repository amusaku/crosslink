/**
 * Copyright Â© 2016-2025 The Thingsboard Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package queue;

option java_multiple_files = true;
option java_package = "org.thingsboard.mqtt.broker.gen.queue";
option java_outer_classname = "QueueProtos";

message SessionInfoProto {
  ServiceInfo serviceInfo = 1;
  int64 sessionIdMSB = 2;
  int64 sessionIdLSB = 3;
  ClientInfoProto clientInfo = 4;
  bool cleanStart = 5;
  ConnectionInfoProto connectionInfo = 6;
  optional int32 sessionExpiryInterval = 7;
}

message PublishMsgProto {
  string clientId = 1;
  int32 packetId = 2;
  bytes payload = 3;
  bool retain = 4;
  int32 qos = 5;
  string topicName = 6;
  repeated UserPropertyProto userProperties = 7;
  optional MqttPropertiesProto mqttProperties = 8;
}

message MqttPropertiesProto {
  optional int32 payloadFormatIndicator = 1;
  optional string contentType = 2;
  optional string responseTopic = 3;
  optional bytes correlationData = 4;
  repeated int32 subscriptionIds = 5;
}

message UserPropertyProto {
  string key = 1;
  string value = 2;
}

enum RetainHandling {
  SEND = 0;
  SEND_IF_NOT_EXISTS = 1;
  DONT_SEND = 2;
}

message SubscriptionOptionsProto {
  bool noLocal = 1;
  bool retainAsPublish = 2;
  RetainHandling retainHandling = 3;
}

message TopicSubscriptionProto {
  string topic = 1;
  int32 qos = 2;
  optional string shareName = 3;
  SubscriptionOptionsProto options = 4;
  optional int32 subscriptionId = 5;
}

message ClientInfoProto {
  string clientId = 1;
  string clientType = 2;
  bytes clientIpAdr = 3;
}

message ConnectionInfoProto {
  int64 connectedAt = 1;
  int64 disconnectedAt = 2;
  int32 keepAlive = 3;
}

message RetainedMsgProto {
  bytes payload = 1;
  int32 qos = 2;
  string topic = 3;
  repeated UserPropertyProto userProperties = 4;
  int64 createdTime = 5;
  optional MqttPropertiesProto mqttProperties = 6;
}

message ClientSessionInfoProto {
  bool connected = 1;
  SessionInfoProto sessionInfo = 2;
}

message ClientSessionEventProto {
  string eventType = 1;
  SessionInfoProto sessionInfo = 2;
}

message ClientSessionEventResponseProto {
  bool success = 1;
  bool sessionPresent = 2;
}

message ClientSubscriptionsProto {
  repeated TopicSubscriptionProto subscriptions = 1;
}

message DisconnectClientCommandProto {
  int64 sessionIdMSB = 1;
  int64 sessionIdLSB = 2;
  bool newSessionCleanStart = 3;
  optional string reasonType = 4;
}

message DevicePublishMsgProto {
  int64 serialNumber = 1;
  int64 time = 2;
  int32 packetId = 3;
  bytes payload = 4;
  int32 qos = 5;
  string topicName = 6;
  string clientId = 7;
  string packetType = 8;
  repeated UserPropertyProto userProperties = 9;
  bool retain = 10;
  optional MqttPropertiesProto mqttProperties = 11;
}

message ClientPublishMsgProto {
  string clientId = 1;
  PublishMsgProto publishMsg = 2;
}

message UsageStatsKVProto {
  string key = 1;
  int64 value = 2;
}

message ToUsageStatsMsgProto {
  string serviceId = 1;
  int64 ts = 2;
  UsageStatsKVProto usageStats = 3;
}

message ServiceInfo {
  string serviceId = 1;
}

message ApplicationRemovedEventProto {
  string clientId = 1;
}
